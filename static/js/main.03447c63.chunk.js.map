{"version":3,"sources":["components/Heading.js","components/Loader.js","components/Unplashimg.js","App.js","API.js","serviceWorker.js","index.js"],"names":["Header","styled","header","H1","h1","H6","p","Heading","style","color","Loading","div","BottomLoading","Loader","className","Img","img","Unplashimg","url","key","src","alt","GlobalStyle","createGlobalStyle","WarapperImage","section","App","useState","images","setImages","useEffect","fetchImages","axios","get","then","res","data","dataLength","length","next","hasMore","loader","bottom","map","image","urls","thumb","id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wpBAGA,IAAMA,EAASC,IAAOC,OAAV,KASNC,EAAIF,IAAOG,GAAT,KAUFC,EAAIJ,IAAOK,EAAT,KAIMC,EAAU,WACpB,OACI,kBAACP,EAAD,KACI,kBAACG,EAAD,aAAS,0BAAMK,MAAO,CAACC,MAAM,YAApB,UAAT,YACA,2CACA,6BACA,kBAACJ,EAAD,mCAA+B,0BAAMG,MAAO,CAACC,MAAM,YAApB,WAA/B,wB,m7EC5BZ,IAAMC,EAAST,IAAOU,IAAT,KA2DNC,EAAeX,IAAOU,IAAT,KA6DPE,EAAS,WAClB,OACI,oCACA,kBAACH,EAAD,KACI,yBAAKI,UAAU,aAAY,gCAG/B,kBAACF,EAAD,KACA,yBAAKE,UAAU,gBAAe,8BAAW,8BAAW,8BAAW,kC,sICjIvE,IAAMC,EAAMd,IAAOe,IAAV,KAOIC,EAAa,SAAC,GAAgB,IAAfC,EAAc,EAAdA,IAAKC,EAAS,EAATA,IAC7B,OAAO,kBAACJ,EAAD,CAAKK,IAAKF,EAAKC,IAAKA,EAAKE,IAAI,M,2dCAxC,IAAMC,EAAcC,YAAH,KAaXC,EAAgBvB,IAAOwB,QAAV,KA6CJC,MAlCf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNC,EADM,KACEC,EADF,KAGbC,qBAAU,WACRC,MAEA,IACF,IAAMA,EAAa,WAIjBC,IACCC,IADD,UAHe,2BAGf,oCC9CkB,8CD8ClB,cAECC,MAAK,SAAAC,GAAG,OAAGN,EAAU,GAAD,mBAAKD,GAAL,YAAgBO,EAAIC,YAG3C,OACE,yBAAKtB,UAAU,OACT,kBAAC,EAAD,MACA,kBAACQ,EAAD,MACA,kBAAC,IAAD,CAAiBe,WAAYT,EAAOU,OAAQC,KAAOR,EAAaS,SAAS,EAAMC,OAAS,kBAAC,EAAD,OAExF,kBAAC,IAAD,CAAMC,QAAM,GACZ,kBAAClB,EAAD,KACCI,EAAOe,KAAK,SAACC,GAAD,OACX,kBAAC,EAAD,CAAY1B,IAAK0B,EAAMC,KAAKC,MAAO3B,IAAKyB,EAAMG,aEhDtCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAEH,kBAAC,EAAD,MAEJC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.03447c63.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from \"styled-components\"\r\n\r\nconst Header = styled.header`\r\n\r\nmax-width: 70rem;\r\nmargin: 2rem auto;\r\ntext-align: center;\r\n\r\n\r\n`;\r\n\r\nconst H1 =styled.h1`\r\n\r\nfont-family: 'Lato', sans-serif;\r\nfont-family: 'Poppins', sans-serif;;\r\nmargin-bottom:1em;\r\nbackground-color: #282c34;\r\nborder-radius: 5px;\r\ncolor:#00e59b;\r\n\r\n`;\r\nconst H6 =styled.p`\r\ncolor:tomato\r\n\r\n`;\r\nexport const  Heading = () => {\r\n    return (\r\n        <Header>\r\n            <H1> Vdz <span style={{color:\"#61dafb\"}}>‚ùñ</span> Images </H1>\r\n            <p>üíï</p>\r\n            <br/>\r\n            <H6> You can watch the picture <span style={{color:\"#00e59b\"}}>forever</span> without breaking </H6>\r\n            \r\n        </Header>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react'\r\nimport styled from \"styled-components\"\r\n\r\n\r\nconst Loading =styled.div`\r\n    text-align:center;\r\n.lds-heart {\r\n    display: inline-block;\r\n    position: relative;\r\n    width: 80px;\r\n    height: 80px;\r\n    transform: rotate(45deg);\r\n    transform-origin: 40px 40px;\r\n  }\r\n  .lds-heart div {\r\n    top: 32px;\r\n    left: 32px;\r\n    position: absolute;\r\n    width: 32px;\r\n    height: 32px;\r\n    background: #00e59b;\r\n    animation: lds-heart 1.2s infinite cubic-bezier(0.215, 0.61, 0.355, 1);\r\n  }\r\n  .lds-heart div:after,\r\n  .lds-heart div:before {\r\n    content: \" \";\r\n    position: absolute;\r\n    display: block;\r\n    width: 32px;\r\n    height: 32px;\r\n    background: #00e59b;\r\n  }\r\n  .lds-heart div:before {\r\n    left: -24px;\r\n    border-radius: 50% 0 0 50%;\r\n  }\r\n  .lds-heart div:after {\r\n    top: -24px;\r\n    border-radius: 50% 50% 0 0;\r\n  }\r\n  @keyframes lds-heart {\r\n    0% {\r\n      transform: scale(0.95);\r\n    }\r\n    5% {\r\n      transform: scale(1.1);\r\n      \r\n    }\r\n    39% {\r\n      transform: scale(0.85);\r\n    }\r\n    45% {\r\n      transform: scale(1);\r\n    }\r\n    60% {\r\n      transform: scale(0.95);\r\n    }\r\n    100% {\r\n      transform: scale(0.9);\r\n    }\r\n  }\r\n\r\n    `;\r\n const BottomLoading =styled.div`\r\n  text-align:center;\r\n .lds-ellipsis {\r\n    display: inline-block;\r\n    position: relative;\r\n    width: 80px;\r\n    height: 80px;\r\n  }\r\n  .lds-ellipsis div {\r\n    position: absolute;\r\n    top: 33px;\r\n    width: 13px;\r\n    height: 13px;\r\n    border-radius: 50%;\r\n    background: linear-gradient(0deg, rgba(207,245,219,1) 39%, rgba(20,235,211,1) 100%);\r\n    animation-timing-function: cubic-bezier(0, 1, 1, 0);\r\n  }\r\n  .lds-ellipsis div:nth-child(1) {\r\n    left: 8px;\r\n    animation: lds-ellipsis1 0.6s infinite;\r\n  }\r\n  .lds-ellipsis div:nth-child(2) {\r\n    left: 8px;\r\n    animation: lds-ellipsis2 0.6s infinite;\r\n  }\r\n  .lds-ellipsis div:nth-child(3) {\r\n    left: 32px;\r\n    animation: lds-ellipsis2 0.6s infinite;\r\n  }\r\n  .lds-ellipsis div:nth-child(4) {\r\n    left: 56px;\r\n    animation: lds-ellipsis3 0.6s infinite;\r\n  }\r\n  @keyframes lds-ellipsis1 {\r\n    0% {\r\n      transform: scale(0);\r\n    }\r\n    100% {\r\n      transform: scale(1);\r\n    }\r\n  }\r\n  @keyframes lds-ellipsis3 {\r\n    0% {\r\n      transform: scale(1);\r\n    }\r\n    100% {\r\n      transform: scale(0);\r\n      \r\n    }\r\n  }\r\n  @keyframes lds-ellipsis2 {\r\n    0% {\r\n      transform: translate(0, 0);\r\n    }\r\n    100% {\r\n      transform: translate(24px, 0);\r\n    }\r\n  }\r\n  \r\n \r\n `;\r\nexport const Loader = () => {\r\n    return (\r\n        <>\r\n        <Loading >\r\n            <div className=\"lds-heart\"><div></div></div>\r\n        </Loading>\r\n\r\n        <BottomLoading>\r\n        <div className=\"lds-ellipsis\"><div></div><div></div><div></div><div></div></div>\r\n        </BottomLoading>\r\n        </>\r\n    )\r\n}\r\n\r\n \r\n","import React from 'react'\r\nimport styled from \"styled-components\"\r\n\r\nconst Img = styled.img`\r\n    width: 100%;\r\n    height: 100%;\r\n    object-fit: cover;\r\n\r\n`;\r\n\r\nexport const Unplashimg = ({url, key}) => {\r\n    return <Img src={url} key={key} alt=\"\"/>\r\n        \r\n    \r\n}\r\n\r\n\r\n","import React,{useState,useEffect} from 'react';\r\nimport {Heading} from \"./components/Heading\";\r\nimport {Loader} from \"./components/Loader\";\r\nimport {Unplashimg} from \"./components/Unplashimg\";\r\nimport axios from \"axios\"\r\nimport styled from \"styled-components\";\r\nimport {createGlobalStyle} from \"styled-components\";\r\nimport Zoom from \"react-reveal/Zoom\";\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\nimport { ApiKey } from './API';\r\n//style\r\nconst GlobalStyle = createGlobalStyle`\r\n\r\n  *{\r\n    margin:0;\r\n    padding:0;\r\n    box-sizing: border-box;\r\n  }\r\n  body{\r\n    font-family: sans-serif;\r\n  }\r\n\r\n`;\r\n\r\nconst WarapperImage = styled.section`\r\n\r\n  max-width: 70rem;\r\n  margin: 4rem auto;\r\n  display: grid;\r\n  grid-gap: 1em;\r\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\r\n  grid-auto-rows: 300px\r\n\r\n`;\r\n\r\nfunction App() {\r\n  const [images, setImages] = useState([])\r\n\r\n  useEffect(()=>{\r\n    fetchImages();\r\n    // .catch(err =>console.log(err))\r\n  },[])\r\n  const fetchImages =() =>{\r\n    const apiRoot =\"https://api.unsplash.com\";\r\n    // const accessKey = process.env.REACT_APP_ACCESSKEY;\r\n    \r\n    axios\r\n    .get(`${apiRoot}/photos/random?client_id=${ApiKey}&count=10`)\r\n    .then(res =>setImages([...images, ...res.data])\r\n    )\r\n  }\r\n  return (\r\n    <div className=\"App\">\r\n          <Heading/>\r\n          <GlobalStyle />\r\n          <InfiniteScroll  dataLength={images.length} next ={fetchImages} hasMore={true} loader ={<Loader/>}>\r\n          \r\n          <Zoom bottom>\r\n          <WarapperImage >\r\n          {images.map( (image) =>(\r\n            <Unplashimg url={image.urls.thumb} key={image.id}/>\r\n          ))}\r\n          </WarapperImage>\r\n          </Zoom>\r\n          </InfiniteScroll>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","export const ApiKey = 'dxQPYlMsW2SuCrOwjM5pYKzOhlY_9UCB9ZMBbvcYcg8'","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, { StrictMode } from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  \r\n      <App />\r\n  ,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}