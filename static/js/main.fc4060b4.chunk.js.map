{"version":3,"sources":["components/Heading.js","components/Loader.js","components/Unplashimg.js","App.js","serviceWorker.js","index.js"],"names":["Header","styled","header","H1","h1","H6","p","Heading","style","color","Loading","div","BottomLoading","Loader","className","Img","img","Unplashimg","url","key","src","alt","GlobalStyle","createGlobalStyle","WarapperImage","section","App","useState","images","setImages","useEffect","fetchImages","axios","get","process","then","res","data","dataLength","length","next","hasMore","loader","bottom","map","image","urls","thumb","id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wpBAGA,IAAMA,EAASC,IAAOC,OAAV,KASNC,EAAIF,IAAOG,GAAT,KAUFC,EAAIJ,IAAOK,EAAT,KAIMC,EAAU,WACpB,OACI,kBAACP,EAAD,KACI,kBAACG,EAAD,iBAAa,0BAAMK,MAAO,CAACC,MAAM,YAApB,UAAb,YACA,wHACA,6BACA,kBAACJ,EAAD,mCAA+B,0BAAMG,MAAO,CAACC,MAAM,YAApB,WAA/B,wB,m7EC5BZ,IAAMC,EAAST,IAAOU,IAAT,KA2DNC,EAAeX,IAAOU,IAAT,KA6DPE,EAAS,WAClB,OACI,oCACA,kBAACH,EAAD,KACI,yBAAKI,UAAU,aAAY,gCAG/B,kBAACF,EAAD,KACA,yBAAKE,UAAU,gBAAe,8BAAW,8BAAW,8BAAW,kC,sICjIvE,IAAMC,EAAMd,IAAOe,IAAV,KAOIC,EAAa,SAAC,GAAgB,IAAfC,EAAc,EAAdA,IAAKC,EAAS,EAATA,IAC7B,OAAO,kBAACJ,EAAD,CAAKK,IAAKF,EAAKC,IAAKA,EAAKE,IAAI,M,2dCDxC,IAAMC,EAAcC,YAAH,KAaXC,EAAgBvB,IAAOwB,QAAV,KA6CJC,MAlCf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNC,EADM,KACEC,EADF,KAGbC,qBAAU,WACRC,MAEA,IACF,IAAMA,EAAa,WAIjBC,IACCC,IADD,UAHe,2BAGf,oCAFkBC,8CAElB,cAECC,MAAK,SAAAC,GAAG,OAAGP,EAAU,GAAD,mBAAKD,GAAL,YAAgBQ,EAAIC,YAG3C,OACE,yBAAKvB,UAAU,OACT,kBAAC,EAAD,MACA,kBAACQ,EAAD,MACA,kBAAC,IAAD,CAAiBgB,WAAYV,EAAOW,OAAQC,KAAOT,EAAaU,SAAS,EAAMC,OAAS,kBAAC,EAAD,OAExF,kBAAC,IAAD,CAAMC,QAAM,GACZ,kBAACnB,EAAD,KACCI,EAAOgB,KAAK,SAACC,GAAD,OACX,kBAAC,EAAD,CAAY3B,IAAK2B,EAAMC,KAAKC,MAAO5B,IAAK0B,EAAMG,aC/CtCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAEH,kBAAC,EAAD,MAEJC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fc4060b4.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from \"styled-components\"\r\n\r\nconst Header = styled.header`\r\n\r\nmax-width: 70rem;\r\nmargin: 2rem auto;\r\ntext-align: center;\r\n\r\n\r\n`;\r\n\r\nconst H1 =styled.h1`\r\n\r\nfont-family: 'Lato', sans-serif;\r\nfont-family: 'Poppins', sans-serif;;\r\nmargin-bottom:1em;\r\nbackground-color: #282c34;\r\nborder-radius: 5px;\r\ncolor:#00e59b;\r\n\r\n`;\r\nconst H6 =styled.p`\r\ncolor:tomato\r\n\r\n`;\r\nexport const  Heading = () => {\r\n    return (\r\n        <Header>\r\n            <H1> DinhApi <span style={{color:\"#61dafb\"}}>‚ùñ</span> Images </H1>\r\n            <p>This Website create with reactJS for see any images, like and can dowload it üíï</p>\r\n            <br/>\r\n            <H6> You can watch the picture <span style={{color:\"#00e59b\"}}>forever</span> without breaking </H6>\r\n            \r\n        </Header>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react'\r\nimport styled from \"styled-components\"\r\n\r\n\r\nconst Loading =styled.div`\r\n    text-align:center;\r\n.lds-heart {\r\n    display: inline-block;\r\n    position: relative;\r\n    width: 80px;\r\n    height: 80px;\r\n    transform: rotate(45deg);\r\n    transform-origin: 40px 40px;\r\n  }\r\n  .lds-heart div {\r\n    top: 32px;\r\n    left: 32px;\r\n    position: absolute;\r\n    width: 32px;\r\n    height: 32px;\r\n    background: #00e59b;\r\n    animation: lds-heart 1.2s infinite cubic-bezier(0.215, 0.61, 0.355, 1);\r\n  }\r\n  .lds-heart div:after,\r\n  .lds-heart div:before {\r\n    content: \" \";\r\n    position: absolute;\r\n    display: block;\r\n    width: 32px;\r\n    height: 32px;\r\n    background: #00e59b;\r\n  }\r\n  .lds-heart div:before {\r\n    left: -24px;\r\n    border-radius: 50% 0 0 50%;\r\n  }\r\n  .lds-heart div:after {\r\n    top: -24px;\r\n    border-radius: 50% 50% 0 0;\r\n  }\r\n  @keyframes lds-heart {\r\n    0% {\r\n      transform: scale(0.95);\r\n    }\r\n    5% {\r\n      transform: scale(1.1);\r\n      \r\n    }\r\n    39% {\r\n      transform: scale(0.85);\r\n    }\r\n    45% {\r\n      transform: scale(1);\r\n    }\r\n    60% {\r\n      transform: scale(0.95);\r\n    }\r\n    100% {\r\n      transform: scale(0.9);\r\n    }\r\n  }\r\n\r\n    `;\r\n const BottomLoading =styled.div`\r\n  text-align:center;\r\n .lds-ellipsis {\r\n    display: inline-block;\r\n    position: relative;\r\n    width: 80px;\r\n    height: 80px;\r\n  }\r\n  .lds-ellipsis div {\r\n    position: absolute;\r\n    top: 33px;\r\n    width: 13px;\r\n    height: 13px;\r\n    border-radius: 50%;\r\n    background: linear-gradient(0deg, rgba(207,245,219,1) 39%, rgba(20,235,211,1) 100%);\r\n    animation-timing-function: cubic-bezier(0, 1, 1, 0);\r\n  }\r\n  .lds-ellipsis div:nth-child(1) {\r\n    left: 8px;\r\n    animation: lds-ellipsis1 0.6s infinite;\r\n  }\r\n  .lds-ellipsis div:nth-child(2) {\r\n    left: 8px;\r\n    animation: lds-ellipsis2 0.6s infinite;\r\n  }\r\n  .lds-ellipsis div:nth-child(3) {\r\n    left: 32px;\r\n    animation: lds-ellipsis2 0.6s infinite;\r\n  }\r\n  .lds-ellipsis div:nth-child(4) {\r\n    left: 56px;\r\n    animation: lds-ellipsis3 0.6s infinite;\r\n  }\r\n  @keyframes lds-ellipsis1 {\r\n    0% {\r\n      transform: scale(0);\r\n    }\r\n    100% {\r\n      transform: scale(1);\r\n    }\r\n  }\r\n  @keyframes lds-ellipsis3 {\r\n    0% {\r\n      transform: scale(1);\r\n    }\r\n    100% {\r\n      transform: scale(0);\r\n      \r\n    }\r\n  }\r\n  @keyframes lds-ellipsis2 {\r\n    0% {\r\n      transform: translate(0, 0);\r\n    }\r\n    100% {\r\n      transform: translate(24px, 0);\r\n    }\r\n  }\r\n  \r\n \r\n `;\r\nexport const Loader = () => {\r\n    return (\r\n        <>\r\n        <Loading >\r\n            <div className=\"lds-heart\"><div></div></div>\r\n        </Loading>\r\n\r\n        <BottomLoading>\r\n        <div className=\"lds-ellipsis\"><div></div><div></div><div></div><div></div></div>\r\n        </BottomLoading>\r\n        </>\r\n    )\r\n}\r\n\r\n \r\n","import React from 'react'\r\nimport styled from \"styled-components\"\r\n\r\nconst Img = styled.img`\r\n    width: 100%;\r\n    height: 100%;\r\n    object-fit: cover;\r\n\r\n`;\r\n\r\nexport const Unplashimg = ({url, key}) => {\r\n    return <Img src={url} key={key} alt=\"\"/>\r\n        \r\n    \r\n}\r\n\r\n\r\n","import React,{useState,useEffect} from 'react';\nimport {Heading} from \"./components/Heading\";\nimport {Loader} from \"./components/Loader\";\nimport {Unplashimg} from \"./components/Unplashimg\";\nimport axios from \"axios\"\nimport styled from \"styled-components\";\nimport {createGlobalStyle} from \"styled-components\";\nimport Zoom from \"react-reveal/Zoom\";\nimport InfiniteScroll from 'react-infinite-scroll-component';\n//style\nconst GlobalStyle = createGlobalStyle`\n\n  *{\n    margin:0;\n    padding:0;\n    box-sizing: border-box;\n  }\n  body{\n    font-family: sans-serif;\n  }\n\n`;\n\nconst WarapperImage = styled.section`\n\n  max-width: 70rem;\n  margin: 4rem auto;\n  display: grid;\n  grid-gap: 1em;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  grid-auto-rows: 300px\n\n`;\n\nfunction App() {\n  const [images, setImages] = useState([])\n\n  useEffect(()=>{\n    fetchImages();\n    // .catch(err =>console.log(err))\n  },[])\n  const fetchImages =() =>{\n    const apiRoot =\"https://api.unsplash.com\";\n    const accessKey = process.env.REACT_APP_ACCESSKEY;\n    \n    axios\n    .get(`${apiRoot}/photos/random?client_id=${accessKey}&count=10`)\n    .then(res =>setImages([...images, ...res.data])\n    )\n  }\n  return (\n    <div className=\"App\">\n          <Heading/>\n          <GlobalStyle />\n          <InfiniteScroll  dataLength={images.length} next ={fetchImages} hasMore={true} loader ={<Loader/>}>\n          \n          <Zoom bottom>\n          <WarapperImage >\n          {images.map( (image) =>(\n            <Unplashimg url={image.urls.thumb} key={image.id}/>\n          ))}\n          </WarapperImage>\n          </Zoom>\n          </InfiniteScroll>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  \n      <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}